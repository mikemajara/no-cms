---
description: 
globs: 
alwaysApply: true
---

# Project

- This project is meant to be a library that adds functionality to other projects on which it's installed.
- The main goal is simplifying the Notion API to facilitate dev experience with Notion as a CMS

## Design 
- Notion users should be able to quickly query fields and use it as a simple database, but also have access to the complex information that notion sends in it's API. This would be structured in 3 levels:

### Task list

**Notion Simple API**

- [x]  Notion generated types: Types of a database are accessed in a simple fashion and Notion Types match JS types. Example: Dates in Notion would convert to Date types in JS easily accessible for example with record.updatedAt
    - [ ]  Formula type generate with default if one record exists. If string then string if number, number, etc
- [ ]  Blocks: Blocks would be extracted and downloaded and converted to markdown to render them as with as much fidelity as possible to Notion’s UI. Notion API returns blocks in a parent-child hierarchy so this would require multiple calls and processing the data in an advanced way. But could work.
    - [ ]  Markdown support
    - [ ]  Image rendering: Notion serves images with the AWS url where they are stored, with a short lived token. We need to think how this is going to be designed if we are to support images? Maybe this is out of the scope of the project?
- [x]  Notion generated functions
    - [x]  Query API builder
    - [ ]  

**Notion Advanced API**

- [ ]  **Notion generated types**: Types of a database are accessed in a simple fashion but contain default converted complex types. Example: Notion Multi Select tags would convert to a more complex JS type that includes the label, and extra metadata like colors, or sorting. People type in Notion would convert to a more complex JS type that includes the user name, user ID and user email if available.
